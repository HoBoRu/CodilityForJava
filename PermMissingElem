//PermMissingElem Codility JAVA Solution 
//by Jerry
/**
	 * @param args
	 * A zero-indexed array A consisting of N different integers is given. The array contains integers in the range [1..(N + 1)], which means that exactly one element is missing.
		Your goal is to find that missing element.
		Write a function:
		class Solution { public int solution(int[] A); }
		that, given a zero-indexed array A, returns the value of the missing element.
		For example, given array A such that:
		  A[0] = 2
		  A[1] = 3
		  A[2] = 1
		  A[3] = 5
		the function should return 4, as it is the missing element.
		Assume that:
		N is an integer within the range [0..100,000];
		the elements of A are all distinct;
		each element of array A is an integer within the range [1..(N + 1)].
		Complexity:
		expected worst-case time complexity is O(N);
		expected worst-case space complexity is O(1), beyond input storage (not counting the storage required for input arguments).
		Elements of input arrays can be modified.
	 */
   
   public static int solution_3_PermMissingElem(int[] A) 
   {
 
    if (A.length == 0) //若輸入的陣列長度是0 沒必要跑
        return 1;
 
    int sumOfAllNumbers = 0; //把全部的數字做加總
    for (int num : A) //從陣列第一個數字開始走
        sumOfAllNumbers += num; //加總
/*	
 //變成for迴圈
  for (int num =0 ; num <A.length ; num++)
    {
        sumOfAllNumbers += A[num];
    }
*/    
    long N = A.length; 
    long expectedSumOfAllNumbers = ((N + 1)*(N + 2))/2; 
    //預期全部加總會得到總數 假設4個數 (1+4)*4/2 =10 五個數 =15 相減可得數字5 是新增的
    //同理可證 先算此四個數的加總 再算原本預期五個數的加總 相減 可得 最後一個數字
 
    long missingNumber = expectedSumOfAllNumbers - sumOfAllNumbers;
 
    return (int) missingNumber;
 
}
